// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id    String  @id @default(cuid())
  name  String
  image String?
  slug  String

  products Product[]
}

model Store {
  id          String    @id @default(cuid())
  name        String
  image       String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Session     Session[]
  Product     Product[]

  OrderItem OrderItem[]

  CartItem CartItem[]

  Wishlist Wishlist[]
}

model Product {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String
  description String?     @db.Text
  price       Decimal
  images      Json
  stock       Int
  storeId     String
  Store       Store       @relation(fields: [storeId], references: [id])
  categoryId  String
  Category    Category    @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
  CartItem    CartItem[]
  Wishlist    Wishlist[]

  @@index([storeId, categoryId, name, slug])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id              String           @id @default(cuid())
  token           String           @unique
  userId          String
  storeId         String?
  store           Store?           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  expires         DateTime
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshSessions RefreshSession[]
}

model RefreshSession {
  id           String   @id @default(cuid())
  identifier   String
  token        String   @unique
  expires      DateTime
  sessionToken String
  session      Session  @relation(fields: [sessionToken], references: [token], onDelete: Cascade)

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          Role      @default(BUYER)
  accounts      Account[]
  sessions      Session[]
  store         Store?
  address       String?

  Order Order[]

  Cart Cart[]

  Wishlist Wishlist[]
}

model Order {
  id           String       @id @default(cuid())
  totalPrice   Decimal
  status       ORDER_STATUS
  userId       String
  User         User         @relation(fields: [userId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  orderAddress String
  orderItems   OrderItem[]

  @@index([userId])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  storeId    String
  store      Store    @relation(fields: [storeId], references: [id])
  quantity   Int
  ordersDate DateTime @default(now())
  price      Decimal

  @@index([orderId])
  @@index([productId])
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ORDER_STATUS {
  REJECTED
  COMPLETED
  PROCESSING
  PENDING
  CANCELLED
}

enum Role {
  BUYER
  SELLER
}
